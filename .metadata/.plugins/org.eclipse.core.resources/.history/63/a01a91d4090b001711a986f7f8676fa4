
public class Main {

	public static void main(String[] args) {
		// TODO Auto-generated method stub

		//Chain chainCalc1 = new AddNumbers();

		//Chain chainCalc2 = new SubtractNumbers();

		Chain chainCalc3 = new MultNumbers();

		///Chain chainCalc4 = new DivideNumbers();

		// Here I tell each object where to forward the

		// data if it can't process the request

		//chainCalc1.setNextChain(chainCalc2);

		chainCalc2.setNextChain(chainCalc3);

		///chainCalc3.setNextChain(chainCalc4);

		// Define the data in the Numbers Object

		// and send it to the first Object in the chain

		Numbers request = new Numbers(4, 2, "add");

		///chainCalc1.calculate(request);

	}

	interface Chain {
		public void setNextChain(Chain nextChain);

		public void calculate(Numbers request);

	}

	class Numbers {

		private float number1;

		private float number2;

		private String calculationWanted;

		public Numbers(float newNumber1, float newNumber2, String calcWanted) {

			number1 = newNumber1;

			number2 = newNumber2;

			calculationWanted = calcWanted;

		}

		public float getNumber1() {
			return number1;
		}

		public float getNumber2() {
			return number2;
		}

		public String getCalcWanted() {
			return calculationWanted;
		}

	}

	class AddNumbers implements Chain {
		private Chain nextInChain;

		public void setNextChain(Chain nextChain) {

			nextInChain = nextChain;

		}

		// Tries to calculate the data, or passes it

		// to the Object defined in method setNextChain()

		public void calculate(Numbers request) {

			if (request.getCalcWanted() == "add") {

				System.out.print(request.getNumber1() + " + " + request.getNumber2() + " = " +

						(request.getNumber1() + request.getNumber2()));

			} else {

				nextInChain.calculate(request);

			}

		}

	}

	class SubtractNumbers implements Chain {

		private Chain nextInChain;

		@Override

		public void setNextChain(Chain nextChain) {

			nextInChain = nextChain;

		}

		@Override

		public void calculate(Numbers request) {

			if (request.getCalcWanted() == "sub") {

				System.out.print(request.getNumber1() + " - " + request.getNumber2() + " = " +

						(request.getNumber1() - request.getNumber2()));

			} else {

				nextInChain.calculate(request);

			}

		}

	}

	class MultNumbers implements Chain {

		private Chain nextInChain;

		@Override

		public void setNextChain(Chain nextChain) {

			nextInChain = nextChain;
		}

		@Override

		public void calculate(Numbers request) {

			if (request.getCalcWanted() == "mult") {

				System.out.print(request.getNumber1() + " * " + request.getNumber2() + " = "
						+ (request.getNumber1() * request.getNumber2()));

			} else {

				nextInChain.calculate(request);

			}

		}

		class DivideNumbers implements Chain {

			private Chain nextInChain;

			@Override

			public void setNextChain(Chain nextChain) {

				nextInChain = nextChain;

			}

			@Override

			public void calculate(Numbers request) {

				if (request.getCalcWanted() == "div") {

					System.out.print(request.getNumber1() + " / " + request.getNumber2() + " = " +

							(request.getNumber1() / request.getNumber2()));

				} else {

					System.out.print("Out of Handler");

				}

			}

		}

	}
}
